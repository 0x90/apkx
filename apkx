#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# apkx -- A Python wrapper for popular dex converters and Java decompilers.
# Because nobody likes messing with Java classpaths & jar command lines.
# v0.9.3
#
# Author: Bernhard Mueller
# This file is part of the OWASP Mobile Testing Guide (https://github.com/OWASP/owasp-mstg)
#
# See also:
#
# Dex2jar - https://github.com/pxb1988/dex2jar
# CFR - http://www.benf.org/other/cfr/
# 
# This program is free software: you can redistribute it and/or modify  
# it under the terms of the GNU General Public License as published by  
# the Free Software Foundation, version 3.

import argparse
import fnmatch
import os
import subprocess
import zipfile

cwd = os.path.dirname(os.path.abspath(__file__))
lib_path = os.path.join(cwd, "apkx-libs.jar")
FNULL = open(os.devnull, 'w')

# -Xms512m -Xmx1024m
# -XX:PermSize Ð¸ -XX:MaxPermSize.
# -XX:-UseGCOverheadLimit


class ApkX(object):

    def __init__(self, apkfile, converter='dex2jar', decompiler='cfr'):
        self._apkfile = apkfile
        self._converter = converter
        self._decompiler = decompiler
        self._ext_path = os.path.splitext(os.path.basename(self._apkfile))[0]
        self._src_path = os.path.join(self._ext_path, "src")

    def unpack_apk(self):
        if os.path.exists(self._ext_path):
            print("Already extracted to %s Skipping" % self._ext_path)
            return False

        print("Extracting " + self._apkfile + " to " + self._ext_path)

        try:
            zip_ref = zipfile.ZipFile(self._apkfile, 'r')
            zip_ref.extractall(self._ext_path)
            zip_ref.close()
            return True
        except IOError as e:
            print("Error extracting apk: " + str(e))
            return False

    def convert(self,  infile, outfile):
        infile = os.path.join(self._ext_path, infile)
        outfile = os.path.join(self._ext_path, outfile)

        if self._converter == 'dex2jar':
            subprocess.call(['/usr/bin/java', '-cp', lib_path, 'com.googlecode.dex2jar.tools.Dex2jarCmd',
                            infile, '-o',  outfile, '-f'])

        elif self._converter == 'enjarify':
            subprocess.call([cwd + '/enjarify.pex', infile, '-o', outfile, '--force'])

    def decompile(self, jar_filename):

        jar_filename = os.path.join(self._ext_path, jar_filename)

        if self._decompiler == 'cfr':
            subprocess.call(['/usr/bin/java', '-cp', lib_path, 'org.benf.cfr.reader.Main',
                             jar_filename, '--outputdir', self._src_path, '--caseinsensitivefs', 'true',
                             '--silent', 'true'], stdout=FNULL)

        elif self._decompiler == 'procyon':
            subprocess.call(
                ['/usr/bin/java', '-cp', lib_path, 'com.strobel.decompiler.DecompilerDriver', '-jar',
                 jar_filename, '--o', self._src_path], stdout=FNULL)

    def run(self):
        '''
                Unzip the application package.
        '''
        if not self.unpack_apk():
            print('unpack errror')
            return

        '''
            Iterate over all .dex files
        '''
        for root, dirs, files in os.walk(self._ext_path):

            for filename in fnmatch.filter(files, "*.dex"):

                # print(os.path.join(root, filename))
                jar_filename = os.path.splitext(filename)[0] + ".jar"

                print('Converting: ' + filename + ' -> ' + jar_filename + ' (' + self._converter + ')')

                '''
                    Conversion Step
                '''

                try:
                    self.convert(filename, jar_filename)
                except Exception as e:
                    print('Error converting dex to jar:' + str(e))
                    continue

                '''
                    Decompilation Step
                '''

                print("Decompiling to " + self._src_path + ' (' + self._decompiler + ')')

                try:
                    self.decompile(jar_filename)
                except Exception as e:
                    print('Error decompiling:' + str(e))


def main():
    '''
    ====== Main ======
    '''

    parser = argparse.ArgumentParser(description='Decompile an Android APK archive.')

    parser.add_argument('-c', '--converter', help='Dex to jar conversion method (default: dex2jar)',
                        choices=['dex2jar', 'enjarify'], default="dex2jar")
    parser.add_argument('-d', '--decompiler', help='Decompiler backend to use (default: cfr)',
                        choices=['cfr', 'procyon'],
                        default="cfr")
    parser.add_argument('apkfile', help='File to decompile')

    args = parser.parse_args()

    apkx = ApkX(args.apkfile, args.converter, args.decompiler)
    apkx.run()


if __name__ == '__main__':
    main()

